generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  passwordHash      String
  userType          String
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  role              Role?     @relation(fields: [roleId], references: [id])
  roleId            String?

  leader            User?     @relation("LeaderFollower", fields: [leaderId], references: [id])
  leaderId          String?
  followers         User[]    @relation("LeaderFollower")

  selfEvaluations   SelfEvaluation[]
  peerEvaluations   PeerEvaluation[]   @relation("Evaluated")
  givenEvaluations  PeerEvaluation[]   @relation("Evaluator")
  indicatedReferences ReferenceIndication[] @relation("Indicator")
  receivedReferences  ReferenceIndication[] @relation("Indicated")
}

model Role {
  id          String   @id @default(uuid())
  name        String
  type        String
  description String?
  users       User[]
  criteria    RoleCriteria[]
}

model EvaluationCriterion {
  id            String   @id @default(uuid())
  pillar        String
  criterionName String
  description   String?
  roles         RoleCriteria[]
  selfEvaluations SelfEvaluation[]
  peerEvaluations PeerEvaluation[]
}

model RoleCriteria {
  role        Role     @relation(fields: [roleId], references: [id])
  roleId      String
  criterion   EvaluationCriterion @relation(fields: [criterionId], references: [id])
  criterionId String

  @@id([roleId, criterionId])
}

model EvaluationCycle {
  id                   String   @id @default(uuid())
  name                 String
  startDate            DateTime
  endDate              DateTime
  status               String
  
  selfEvaluations      SelfEvaluation[]
  peerEvaluations      PeerEvaluation[]
  referenceIndications ReferenceIndication[]
}

model SelfEvaluation {
  id                String   @id @default(uuid())
  score             Int
  justification     String
  submissionStatus  String   @default("Pendente")

  user              User     @relation(fields: [userId], references: [id])
  userId            String
  cycle             EvaluationCycle @relation(fields: [cycleId], references: [id])
  cycleId           String
  criterion         EvaluationCriterion @relation(fields: [criterionId], references: [id])
  criterionId       String

  @@unique([userId, cycleId, criterionId])
}

model PeerEvaluation {
  id            String   @id @default(uuid())
  score         Int
  justification String

  evaluatedUser User     @relation("Evaluated", fields: [evaluatedUserId], references: [id])
  evaluatedUserId String
  evaluatorUser User     @relation("Evaluator", fields: [evaluatorUserId], references: [id])
  evaluatorUserId String
  cycle         EvaluationCycle @relation(fields: [cycleId], references: [id])
  cycleId       String
  criterion     EvaluationCriterion @relation(fields: [criterionId], references: [id])
  criterionId   String
  
  @@unique([evaluatedUserId, evaluatorUserId, cycleId, criterionId])
}

model ReferenceIndication {
  id              String   @id @default(uuid())
  referenceType   String
  justification   String

  indicatedUser   User     @relation("Indicated", fields: [indicatedUserId], references: [id])
  indicatedUserId String
  indicatorUser   User     @relation("Indicator", fields: [indicatorUserId], references: [id])
  indicatorUserId String
  cycle           EvaluationCycle @relation(fields: [cycleId], references: [id])
  cycleId         String
}