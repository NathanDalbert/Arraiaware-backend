generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                   String    @id @default(uuid())
  name                 String
  email                String    @unique
  passwordHash         String
  userType             UserType
  unidade              String?
  isActive             Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  leaderId             String?
  roles                Role[]
  leader               User?     @relation("LeaderTeam", fields: [leaderId], references: [id])
  teamMembers          User[]    @relation("LeaderTeam")
  selfEvaluations      SelfEvaluation[]
  evaluationsReceived  PeerEvaluation[] @relation("EvaluatedUser")
  evaluationsGiven     PeerEvaluation[] @relation("EvaluatorUser")
  referencesIndicated  ReferenceIndication[] @relation("IndicatorUser")
  referencesReceived   ReferenceIndication[] @relation("IndicatedUser")
  managedProjects Project[] @relation("ManagedProjects")
  projects        Project[] @relation("CollaboratorOnProjects")
}

model Project {
  id            String   @id @default(uuid())
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  managerId     String
  manager       User     @relation("ManagedProjects", fields: [managerId], references: [id])

  collaborators User[]   @relation("CollaboratorOnProjects")

  cycleId       String
  cycle         EvaluationCycle @relation(fields: [cycleId], references: [id])
}

model Role {
  id          String   @id @default(uuid())
  name        String
  type        String
  description String?
  users       User[]
  criteria    RoleCriteria[]
}

model EvaluationCriterion {
  id            String   @id @default(uuid())
  pillar        String
  criterionName String   @unique
  description   String?
  roles         RoleCriteria[]
  selfEvaluations SelfEvaluation[]
}

model RoleCriteria {
  roleId      String
  criterionId String
  role        Role                @relation(fields: [roleId], references: [id])
  criterion   EvaluationCriterion @relation(fields: [criterionId], references: [id])

  @@id([roleId, criterionId])
}

model EvaluationCycle {
  id                   String    @id @default(uuid())
  name                 String    @unique
  startDate            DateTime
  endDate              DateTime
  status               String
  selfEvaluations      SelfEvaluation[]
  peerEvaluations      PeerEvaluation[]
  referenceIndications ReferenceIndication[]
  projects             Project[]
}

model SelfEvaluation {
  id                 String     @id @default(uuid())
  score              Int
  justification      String
  scoreDescription   String?
  submissionStatus   String     @default("Pendente")
  userId             String
  cycleId            String
  criterionId        String
  user               User       @relation(fields: [userId], references: [id])
  cycle              EvaluationCycle @relation(fields: [cycleId], references: [id])
  criterion          EvaluationCriterion @relation(fields: [criterionId], references: [id])

  @@unique([userId, cycleId, criterionId])
}

model PeerEvaluation {
  id                   String    @id @default(uuid())
  project              String?
  motivatedToWorkAgain String?
  generalScore         Float
  pointsToImprove      String
  pointsToExplore      String
  evaluatedUserId      String?
  evaluatorUserId      String
  cycleId              String
  evaluatedUser        User?     @relation("EvaluatedUser", fields: [evaluatedUserId], references: [id])
  evaluatorUser        User      @relation("EvaluatorUser", fields: [evaluatorUserId], references: [id])
  cycle                EvaluationCycle @relation(fields: [cycleId], references: [id])
}

model ReferenceIndication {
  id              String   @id @default(uuid())
  justification   String
  indicatedUserId String?
  indicatorUserId String
  cycleId         String
  indicatedUser   User?    @relation("IndicatedUser", fields: [indicatedUserId], references: [id])
  indicatorUser   User     @relation("IndicatorUser", fields: [indicatorUserId], references: [id])
  cycle           EvaluationCycle @relation(fields: [cycleId], references: [id])
}

enum UserType {
  COLABORADOR
  GESTOR
  ADMIN
  RH
}
model ImportHistory {
  id          String   @id @default(cuid())
  fileName    String
  importDate  DateTime @default(now())
  status      String
  file        Bytes
}

